/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StakingContract,
  StakingContractInterface,
} from "../../../contracts/staking.sol/StakingContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_depositToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_rewardPersent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_lockPeriod",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
    ],
    name: "AlreadyClaimed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
    ],
    name: "BeforeMustClaimed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "data",
        type: "uint256",
      },
    ],
    name: "LockPeriod",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
    ],
    name: "OnlyOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositRewardsTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakedBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPersent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastStakeTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claimed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015cb380380620015cb833981810160405281019062000037919062000261565b620000536711df76553bcd8d9760c01b620001b960201b60201c565b6200006f67d5e6f03db5b24fc560c01b620001b960201b60201c565b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000cb67941eff932a4245f160c01b620001b960201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200012867e9a4456270c5c87760c01b620001b960201b60201c565b816003819055506200014b677a8f06e3a0b693a060c01b620001b960201b60201c565b806002819055506200016e6752e944d477e2ea2060c01b620001b960201b60201c565b33600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620002d3565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ee82620001c1565b9050919050565b6200020081620001e1565b81146200020c57600080fd5b50565b6000815190506200022081620001f5565b92915050565b6000819050919050565b6200023b8162000226565b81146200024757600080fd5b50565b6000815190506200025b8162000230565b92915050565b600080600080608085870312156200027e576200027d620001bc565b5b60006200028e878288016200020f565b9450506020620002a1878288016200020f565b9350506040620002b4878288016200024a565b9250506060620002c7878288016200024a565b91505092959194509250565b6112e880620002e36000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637696586711610071578063769658671461012e5780638da5cb5b1461014c578063b6b55f251461016a578063c89039c514610186578063d07c104d146101a4578063f7c618c1146101c2576100a9565b806316934fc4146100ae5780632bffd2ee146100e0578063372500ab146100fc5780633ccfd60b146101065780633fd8b02f14610110575b600080fd5b6100c860048036038101906100c39190610f44565b6101e0565b6040516100d793929190610fa5565b60405180910390f35b6100fa60048036038101906100f59190611008565b610217565b005b6101046102f9565b005b61010e6105df565b005b61011861092e565b6040516101259190611035565b60405180910390f35b610136610934565b6040516101439190611035565b60405180910390f35b6101546109ba565b604051610161919061105f565b60405180910390f35b610184600480360381019061017f9190611008565b6109e0565b005b61018e610c58565b60405161019b91906110d9565b60405180910390f35b6101ac610c7c565b6040516101b99190611035565b60405180910390f35b6101ca610c82565b6040516101d791906110d9565b60405180910390f35b60046020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b61022b67b9712f4fcc244f0b60c01b610ca8565b61023f679b282843b9eaa79360c01b610ca8565b610253676574667f6dda3a7060c01b610ca8565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016102b2939291906110f4565b6020604051808303816000875af11580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190611157565b5050565b61030d67fd6c44bef644ca5460c01b610ca8565b61032167b6fe70b5b05a6e3060c01b610ca8565b6103356789a1a5fbae79d75c60c01b610ca8565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061038c671fd24d9d4d9818d960c01b610ca8565b6103a06752381169f8a4406460c01b610ca8565b6000816000015403610415576103c067447e34d0d8c02f9960c01b610ca8565b6103d467f8f6d4ef3b524d9660c01b610ca8565b80600001546040517f9266535100000000000000000000000000000000000000000000000000000000815260040161040c9190611035565b60405180910390fd5b61042967c7a967fc23e3f1de60c01b610ca8565b61043d670799c38dc2dba62460c01b610ca8565b61045167dc43a072fff3ca0f60c01b610ca8565b8060020160009054906101000a900460ff16156104cd5761047c67b06eae26925ccaf160c01b610ca8565b61049067911873ce76671d2160c01b610ca8565b336040517f2058b6db0000000000000000000000000000000000000000000000000000000081526004016104c4919061105f565b60405180910390fd5b6104e1679bd68a7a710a5c2c60c01b610ca8565b6104f567ce092f7933498ff260c01b610ca8565b6105096785bc3b198124d4f360c01b610ca8565b42600254826001015461051c91906111b3565b111561059857610536674a4013775768b66060c01b610ca8565b61054a67706aef413568379f60c01b610ca8565b600254816001015461055c91906111b3565b6040517f1ffc126200000000000000000000000000000000000000000000000000000000815260040161058f9190611035565b60405180910390fd5b6105ac67ee9f8b933bf662b460c01b610ca8565b6105c0676b5d0a71ab6f4fcb60c01b610ca8565b6105d4670f08143fda88358c60c01b610ca8565b6105dc610cab565b50565b6105f367499aab747322076060c01b610ca8565b61060767da609dd5d1d1bcde60c01b610ca8565b61061b6723b4cd30a8286ee160c01b610ca8565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061067267be6b04f673f2afb760c01b610ca8565b6106866738a97334bcc7274060c01b610ca8565b60008160000154036106fb576106a66734b021718b826c4460c01b610ca8565b6106ba6740135ba63c3a790660c01b610ca8565b80600001546040517f926653510000000000000000000000000000000000000000000000000000000081526004016106f29190611035565b60405180910390fd5b61070f67a768d5d13379a5d060c01b610ca8565b61072367eacb2323664ffc4260c01b610ca8565b610737670143a566b1e3eb9e60c01b610ca8565b8060020160009054906101000a900460ff166107b25761076167efebaba29d08e72d60c01b610ca8565b61077567fabb7c90939fd27c60c01b610ca8565b336040517f901468870000000000000000000000000000000000000000000000000000000081526004016107a9919061105f565b60405180910390fd5b6107c667f1e542466829662360c01b610ca8565b6107d9660896c3716c86f860c01b610ca8565b6107ed675359635eb05e3c9b60c01b610ca8565b60008160000154905061080a67c003397d83d2c42c60c01b610ca8565b600082600001819055506108286731aa0ac7953bc17c60c01b610ca8565b60008260010181905550610846679436c939399c575460c01b610ca8565b60008260020160006101000a81548160ff02191690831515021790555061087767b77f3da9b93ac0d760c01b610ca8565b61088b67b7cfd5b9860e699260c01b610ca8565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016108e69291906111e7565b6020604051808303816000875af1158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190611157565b505050565b60025481565b600061094a679176b7bffc9fbca160c01b610ca8565b61095e6779933ee5c91228fe60c01b610ca8565b610972672057584efa22047b60c01b610ca8565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109f46786d998f1b41cd1f360c01b610ca8565b610a0867bf3967edb44c3a1d60c01b610ca8565b610a1c672851c568d2fbb16360c01b610ca8565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610a79939291906110f4565b6020604051808303816000875af1158015610a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abc9190611157565b50610ad16740add90f0b86cad460c01b610ca8565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610b2391906111b3565b92505081905550610b3e671c0ca9ef20ff72e460c01b610ca8565b42600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610b99674d30e4c8e9acceb460c01b610ca8565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550610c08677a2286af3ce89b5760c01b610ca8565b610c1c6734d13a763575eadb60c01b610ca8565b7f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d3382604051610c4d9291906111e7565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b610cbf6725c899cfde60b61360c01b610ca8565b610cd3678a1303c7512f2d3860c01b610ca8565b610ce767928969d381caf4d560c01b610ca8565b60006064600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610d3b9190611210565b610d459190611281565b9050610d5b670636243b848631e260c01b610ca8565b610d6f67f8dab8d93346bcf360c01b610ca8565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610dcc9291906111e7565b6020604051808303816000875af1158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f9190611157565b50610e24670a854c5dceb8231460c01b610ca8565b6001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550610e93676113e6da9c9295e660c01b610ca8565b610ea767ccc32e3199b4942160c01b610ca8565b7f7a355715549cfe7c1cba26304350343fbddc4b4f72d3ce3e7c27117dd20b5cb881604051610ed69190611035565b60405180910390a150565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1182610ee6565b9050919050565b610f2181610f06565b8114610f2c57600080fd5b50565b600081359050610f3e81610f18565b92915050565b600060208284031215610f5a57610f59610ee1565b5b6000610f6884828501610f2f565b91505092915050565b6000819050919050565b610f8481610f71565b82525050565b60008115159050919050565b610f9f81610f8a565b82525050565b6000606082019050610fba6000830186610f7b565b610fc76020830185610f7b565b610fd46040830184610f96565b949350505050565b610fe581610f71565b8114610ff057600080fd5b50565b60008135905061100281610fdc565b92915050565b60006020828403121561101e5761101d610ee1565b5b600061102c84828501610ff3565b91505092915050565b600060208201905061104a6000830184610f7b565b92915050565b61105981610f06565b82525050565b60006020820190506110746000830184611050565b92915050565b6000819050919050565b600061109f61109a61109584610ee6565b61107a565b610ee6565b9050919050565b60006110b182611084565b9050919050565b60006110c3826110a6565b9050919050565b6110d3816110b8565b82525050565b60006020820190506110ee60008301846110ca565b92915050565b60006060820190506111096000830186611050565b6111166020830185611050565b6111236040830184610f7b565b949350505050565b61113481610f8a565b811461113f57600080fd5b50565b6000815190506111518161112b565b92915050565b60006020828403121561116d5761116c610ee1565b5b600061117b84828501611142565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111be82610f71565b91506111c983610f71565b92508282019050808211156111e1576111e0611184565b5b92915050565b60006040820190506111fc6000830185611050565b6112096020830184610f7b565b9392505050565b600061121b82610f71565b915061122683610f71565b925082820261123481610f71565b9150828204841483151761124b5761124a611184565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061128c82610f71565b915061129783610f71565b9250826112a7576112a6611252565b5b82820490509291505056fea264697066735822122022066375c4901d905829088179962797fd5c655018047c9d5b021b3d504a417c64736f6c63430008120033";

type StakingContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingContract__factory extends ContractFactory {
  constructor(...args: StakingContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _depositToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _rewardPersent: PromiseOrValue<BigNumberish>,
    _lockPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StakingContract> {
    return super.deploy(
      _depositToken,
      _rewardToken,
      _rewardPersent,
      _lockPeriod,
      overrides || {}
    ) as Promise<StakingContract>;
  }
  override getDeployTransaction(
    _depositToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _rewardPersent: PromiseOrValue<BigNumberish>,
    _lockPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _depositToken,
      _rewardToken,
      _rewardPersent,
      _lockPeriod,
      overrides || {}
    );
  }
  override attach(address: string): StakingContract {
    return super.attach(address) as StakingContract;
  }
  override connect(signer: Signer): StakingContract__factory {
    return super.connect(signer) as StakingContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingContractInterface {
    return new utils.Interface(_abi) as StakingContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingContract {
    return new Contract(address, _abi, signerOrProvider) as StakingContract;
  }
}
